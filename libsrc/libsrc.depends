#!/usr/bin/perl -w
#
# Copyright (C) 2010, OMBT LLC and Mike A. Rumore
# All rights reserved.
# Contact: Mike A. Rumore, (mike.a.rumore@gmail.com)
#
use strict;
#
use FileHandle;
use File::Basename;
use Getopt::Std;
use Cwd;
#
my $cmd = $0;
my $little_verbose = 0;
my $lot_verbose = 0;
my $unconditional = 0;
#
sub usage {
	my ($arg0) = @_;
	print <<EOF;

usage: $arg0 [-?|-h] [-v|-V] [-u] [directory_path]

where:
	-? - print usage.
	-h - print usage.
	-v - enable a little verbose.
	-V - enable a lot verbose.
	-u - unconditional build

and [directory_parh] is the path where to start scanning. if 
[directory] is not given, then the current directory is used.

EOF
}
#
sub get_cpps {
	my ($pcpps) = @_;
	#
	# glob list of src files.
	#
	@{${pcpps}} = <src/*.cpp>;
}
#
sub get_cpphdrs {
	my ($pcpps, $pcpphdrs) = @_;
	#
	foreach my $cpp (@{${pcpps}})
	{
		print "SRC: ${cpp}\n" if ($little_verbose == 1);
		#
		open(FH, $cpp) or die $!;
		my @buf = <FH>;
		close(FH);
		#
		my @includes = grep (/^ *# *include *"[^"]*" *$/, @buf);
		chomp(@includes);
		#
		foreach my $include (@includes)
		{
			print "\tINCLUDE: ${include}\n" if ($lot_verbose == 1);
			$include =~ s/^[^"]*"([^"]*)".*$/$1/m;
			print "\tHEADER : ${include}\n" if ($little_verbose == 1);
			push(@{$pcpphdrs->{$cpp}}, $include);
		}
	}
}
#
sub get_hdrs {
	my ($phdrs, $pincludes) = @_;
	#
	# glob list of headers
	#
	@{${phdrs}} = <hdr/*.h>;
	@{${pincludes}} = <hdr/*.i>;
}
#
sub get_hdr_hdrs {
	my ($phdrs, $phdrhdrs) = @_;
	#
	foreach my $hdr (@{${phdrs}})
	{
		print "HDR: ${hdr}\n" if ($little_verbose == 1);
		#
		open(FH, $hdr) or die $!;
		my @buf = <FH>;
		close(FH);
		#
		my @includes = grep (/^ *# *include *"[^"]*" *$/, @buf);
		chomp(@includes);
		#
		foreach my $include (@includes)
		{
			print "\tINCLUDE: ${include}\n" if ($lot_verbose == 1);
			$include =~ s/^[^"]*"([^"]*)".*$/$1/m;
			print "\tHEADER : ${include}\n" if ($little_verbose == 1);
			push(@{$phdrhdrs->{$hdr}}, $include);
		}
	}
}
#
sub make_files {
	my ($pcpps) = @_;
	#
	open(FH, ">.FILES") or die $!;
	#
	print FH "FILES =";
	foreach my $cpp (@{${pcpps}})
	{
		my $tmpcpp = $cpp;
		$tmpcpp =~ s/src\///;
		print FH " \\\n\t${tmpcpp}";
	}
	print FH "\n";
	#
	close(FH);
}
#
sub make_hdrs {
	my ($phdrs, $pincludes) = @_;
	#
	open(FH, ">.HDRS") or die $!;
	#
	print FH "HDRS =";
	foreach my $hdr (@{${phdrs}})
	{
		my $tmphdr = $hdr;
		$tmphdr =~ s/hdr\///;
		print FH " \\\n\t${tmphdr}";
	}
	foreach my $hdr (@{${pincludes}})
	{
		my $tmphdr = $hdr;
		$tmphdr =~ s/hdr\///;
		print FH " \\\n\t${tmphdr}";
	}
	print FH "\n";
	#
	close(FH);
}
#
sub get_all_hdrs {
	my ($phdrs) = @_;
	#
	# glob list of headers and include files.
	#
	@{${phdrs}} = <*/hdr/*.[hi]>;
}
#
sub get_all_hdr_hdrs {
	my ($pallhdrs, $pallhdrhdrs) = @_;
	#
	foreach my $hdr (@{${pallhdrs}})
	{
		print "GET ALL HDR HDRS: ${hdr}\n" if ($lot_verbose == 1);
		#
		open(FH, $hdr) or die $!;
		my @buf = <FH>;
		close(FH);
		#
		my @includes = grep (/^ *# *include *"[^"]*" *$/, @buf);
		chomp(@includes);
		#
		foreach my $include (@includes)
		{
			$include =~ s/^[^"]*"([^"]*)".*$/$1/m;
			$include =~ s/\//\/hdr\//m;
			print "\tHEADER : ${include}\n" if ($lot_verbose == 1);
			push(@{$pallhdrhdrs->{$hdr}}, $include);
		}
	}
}
#
sub trace_hdrs {
	my ($pfh, $m, $pcpphdrs, $pallhdrhdrs) = @_;
	#
	my @dephdrs = ();
	my %seen = ();
	#
	foreach my $cpphdr (@{$pcpphdrs})
	{
		my $hdr = $cpphdr;
		#
		if (${hdr} =~ m/hdr\/.*/) {
			$hdr = "${m}/${cpphdr}";
		} else {
			$hdr =~ s/\//\/hdr\//;
		}
		#
		my @hdrstoexpand = ();
		push @hdrstoexpand, $hdr;
		#
		while (@hdrstoexpand)
		{
			my $xhdr = pop @hdrstoexpand;
			#
			next if (exists $seen{$xhdr});
			$seen{$xhdr} = 1;
			#
			push @dephdrs, $xhdr;
			push @hdrstoexpand, @{${pallhdrhdrs}->{$xhdr}} if (exists ${pallhdrhdrs}->{$xhdr});
		}
	}
	#
	# removes duplicate entries in the list. no longer
	# needed since we track *seen* headers in the above loop.
	#
	# %seen = ();
	# my @uniquedephdrs = grep { ! $seen{$_}++ } @dephdrs;
	#
	# foreach my $dephdr (sort @uniquedephdrs)
	#
	foreach my $dephdr (sort @dephdrs)
	{
		if ($dephdr =~ m/^${m}\//)
		{
			$dephdr =~ s/^${m}\///;
			print $pfh " \\\n\t\t${dephdr}";
		} else {
			$dephdr =~ s/\/hdr\//\//;
			print $pfh " \\\n\t\t\$(INCLUDEDIR)/${dephdr}";
		}
	}
}
#
sub make_dependencies {
	my ($m, $pcpps, $pcpphdrs, $pallhdrhdrs) = @_;
	#
	open(FH, ">.DEPENDS") or die $!;
	#
	foreach my $cpp (sort @{${pcpps}})
	{
		my $obj = $cpp;
		$obj =~ s/^src\/(.*).cpp$/obj\/$1.o/;
		print FH "\n${obj}: \\\n\t\t${cpp}";
		#
		trace_hdrs(\*FH, $m, \@{$pcpphdrs->{$cpp}}, $pallhdrhdrs);
		#
		print FH "\n";
	}
	#
	close(FH);
}
#
sub trim ($) {
	my $string = shift;
	$string =~ s/^\s+//;
	$string =~ s/\s+$//;
	return $string;
}
#
sub check {
	my ($filelistname, $reldir, $filename) = @_;
	if ( ! -r $filename)
	{
		# does not exist or is not readable: rebuild.
		return 0;
	}
	else
	{
		my $filenamemodtime = (stat($filename))[9];
		#
		open(FH, $filelistname) or die $!;
		my @buf = <FH>;
		close(FH);
		#
		my @filelist = grep (!/=/, @buf);
		chomp(@filelist);
		#
		foreach my $file (@filelist)
		{
			$file = trim($file);
			$file =~ s/ *\\.*$//m;
			$file = "$reldir/$file";
			my $filemodtime = (stat($file))[9];
			return 0 if ($filemodtime > $filenamemodtime);
		}
		#
		return 1;
	}
}
#
my %opts;
if (getopts('?hVvu', \%opts) != 1) {
	usage($cmd);
	exit 2;
}
#
foreach my $opt (%opts) {
	if ($opt eq "h") {
		usage($cmd);
		exit 0;
	} elsif ($opt eq "?") {
		usage($cmd);
		exit 0;
	} elsif ($opt eq "V") {
		$lot_verbose = 1;
		$little_verbose = 1;
	} elsif ($opt eq "v") {
		$lot_verbose = 0;
		$little_verbose = 1;
	} elsif ($opt eq "u") {
		$unconditional = 1;
	}
}
#
if ($#ARGV >= 0) {
	my $wd = shift @ARGV;
	chdir($wd) or die "$!";
}
#
my $module = basename(getcwd());
print "Module: $module\n" if ($little_verbose == 1);
#
my @cpps;
get_cpps(\@cpps);
#
my %cpphdrs;
get_cpphdrs(\@cpps, \%cpphdrs);
#
my @hdrs;
my @includes;
get_hdrs(\@hdrs, \@includes);
#
my %hdrhdrs;
get_hdr_hdrs(\@hdrs, \%hdrhdrs);
#
if (($unconditional == 1) ||
    (check(".FILES", "src", ".FILES") == 0)) {
	print "Building .FILES\n";
	make_files(\@cpps);
}
if (($unconditional == 1) ||
    (check(".HDRS", "hdr", ".HDRS") == 0)) {
	print "Building .HDRS\n";
	make_hdrs(\@hdrs, \@includes);
}
#
my $origcwd = getcwd();
chdir("..");
#
my @allhdrs;
get_all_hdrs(\@allhdrs);
#
my %allhdrhdrs;
get_all_hdr_hdrs(\@allhdrs, \%allhdrhdrs);
#
chdir($origcwd);
#
if (($unconditional == 1) || 
    ((check(".FILES", "src", ".DEPENDS") == 0) || 
     (check(".HDRS", "hdr", ".DEPENDS") == 0))) {
	print "Building .DEPENDS\n";
	make_dependencies($module, \@cpps, \%cpphdrs, \%allhdrhdrs);
}
#
exit 0;
